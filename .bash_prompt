# @gf3’s Sexy Bash Prompt, inspired by “Extravagant Zsh Prompt”
# Shamelessly copied from https://github.com/gf3/dotfiles

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM=xterm-256color
fi

# if tput setaf 1 &> /dev/null; then
# 	tput sgr0
# 	if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
# 		MAGENTA=$(tput setaf 9)
# 		ORANGE=$(tput setaf 172)
# 		GREEN=$(tput setaf 190)
# 		PURPLE=$(tput setaf 141)
# 		WHITE=$(tput setaf 256)
# 	else
# 		MAGENTA=$(tput setaf 5)
# 		ORANGE=$(tput setaf 4)
# 		GREEN=$(tput setaf 2)
# 		PURPLE=$(tput setaf 1)
# 		WHITE=$(tput setaf 7)
# 	fi
# 	BOLD=$(tput bold)
# 	RESET=$(tput sgr0)
# else
# 	MAGENTA="\e[1;31m"
# 	ORANGE="\e[1;33m"
# 	GREEN="\e[1;32m"
# 	PURPLE="\e[1;35m"
# 	WHITE="\e[1;37m"
# 	BOLD=""
# 	RESET="\e[00m"
# fi


# function git_info() {
# 	# check if we're in a git repo
# 	git rev-parse --is-inside-work-tree &>/dev/null || return

# 	# quickest check for what branch we're on
# 	branch=$(git symbolic-ref -q HEAD | sed -e 's|^refs/heads/||')

# 	# check if it's dirty (via github.com/sindresorhus/pure)
# 	dirty=$(git diff --quiet --ignore-submodules HEAD &>/dev/null; [ $? -eq 1 ]&& echo -e "*")

# 	echo $WHITE" on "$PURPLE$branch$dirty
# 	# echo " on "$branch$dirty
# }

function parse_git_dirty() {
	[[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]] && echo "*"
}

function parse_git_branch() {
	git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/"
}

# Only show username/host if not default
# function usernamehost() {
# 	echo $MAGENTA$USER$WHITE" at "$ORANGE$HOSTNAME$WHITE" in "
# }

# iTerm Tab and Title Customization and prompt customization
# http://sage.ucsc.edu/xtal/iterm_tab_customization.html

# Put the string " [bash]   hostname::/full/directory/path"
# in the title bar using the command sequence
# \[\e]2;[bash]   \h::\]$PWD\[\a\]

# Put the penultimate and current directory
# in the iterm tab
# \[\e]1;\]$(basename $(dirname $PWD))/\W\[\a\]

PS1="\n\[\e[1;31m\]\u \[\e[1;37m\]at \[\e[1;33m\]\h \[\e[1;37m\]in \[\e[1;34m\]\w\[\e[1;37m\]\$([[ -n \$(git branch 2> /dev/null) ]] && echo \" on \")\[\e[1;35m\]\$(parse_git_branch)\[\e[1;37m\]\n\$ \[\e[00m\]"

